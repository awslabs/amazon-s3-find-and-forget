AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Amazon S3 Find and Forget API

Globals:
  Function:
    Runtime: python3.7
    Timeout: 180
    Layers: !Ref CommonLayers
    Environment:
      Variables:
        AllowOrigin: !If
          - DefaultAccessControlOrigin
          - !Ref WebUIOrigin
          - !Ref AccessControlAllowOriginOverride
        ConfigParam: !Ref ConfigParameter
        DeletionQueueTable: !Ref DeletionQueueTableName
        DataMapperTable: !Ref DataMapperTableName
        GSIBucketCount: "1"
        JobTable: !Ref JobTableName
        JobTableDateGSI: !Ref JobTableDateGSI
        LogLevel: !Ref LogLevel

Parameters:
  AccessControlAllowOriginOverride:
    Type: String
  ConfigParameter:
    Type: String
  CognitoUserPoolArn:
    Type: String
  CommonLayers:
    Type: CommaDelimitedList
    Description: Common layers supplied to all functions
  DataMapperTableName:
    Description: Table name for DataMapper Table
    Type: String
  DeletionQueueTableName:
    Description: Table name for Deletion Queue Table
    Type: String
  EnableAccessLogging:
    Description: Whether to enable access logs
    Type: String
  JobTableDateGSI:
    Description: Date ordered GSI for Jobs Table
    Type: String
  JobTableName:
    Description: Table name for Jobs Table
    Type: String
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - CRITICAL
      - FATAL
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      - NOTSET
  WebUIOrigin:
    Type: String

Conditions:
  EnableAccessLogging: !Equals [!Ref EnableAccessLogging, "true"]
  DefaultAccessControlOrigin: !Equals [!Ref AccessControlAllowOriginOverride, "false"]
  
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      OpenApiVersion: '3.0.1'
      StageName: Prod
      MethodSettings:
        !If
        - EnableAccessLogging
        - - LoggingLevel: INFO
            DataTraceEnabled: false
            ResourcePath: '/*'
            HttpMethod: '*'
        - !Ref AWS::NoValue
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: ./api.definition.yml
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
        AddDefaultAuthorizerToCorsPreflight: False
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !If
          - DefaultAccessControlOrigin
          - !Sub "'${WebUIOrigin}'"
          - !Sub "'${AccessControlAllowOriginOverride}'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseTemplates:
            "application/json": '{ "Message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: !If
                - DefaultAccessControlOrigin
                - !Sub "'${WebUIOrigin}'"
                - !Sub "'${AccessControlAllowOriginOverride}'"
        BAD_REQUEST_BODY:
          StatusCode: 422
          ResponseTemplates:
            "application/json": '{ "Message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: !If
                - DefaultAccessControlOrigin
                - !Sub "'${WebUIOrigin}'"
                - !Sub "'${AccessControlAllowOriginOverride}'"
        BAD_REQUEST_PARAMETERS:
          StatusCode: 422
          ResponseTemplates:
            "application/json": '{ "Message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: !If
                - DefaultAccessControlOrigin
                - !Sub "'${WebUIOrigin}'"
                - !Sub "'${AccessControlAllowOriginOverride}'"
        DEFAULT_5XX:
          ResponseTemplates:
            "application/json": '{ "Message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: !If
                - DefaultAccessControlOrigin
                - !Sub "'${WebUIOrigin}'"
                - !Sub "'${AccessControlAllowOriginOverride}'"

  ## Queue
  EnqueueDeletion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.enqueue_handler
      CodeUri: ../backend/lambdas/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/queue
            Method: PATCH
            RestApiId: !Ref Api
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DeletionQueueTableName
  GetDeletionQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_handler
      CodeUri: ../backend/lambdas/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/queue
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
  CancelDeletion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.cancel_handler
      CodeUri: ../backend/lambdas/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/queue/matches
            Method: DELETE
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
  ProcessQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.process_handler
      CodeUri: ../backend/lambdas/queue/
      MemorySize: 512
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/queue
            Method: DELETE
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTableName
        - Statement:
          - Action: "ssm:GetParameter"
            Effect: "Allow"
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ConfigParameter}"
  # DataMappers
  CreateDataMapper:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.create_data_mapper_handler
      CodeUri: ../backend/lambdas/data_mappers/
      Events:
        Put:
          Type: Api
          Properties:
            Path: /v1/data_mappers/{data_mapper_id}
            Method: PUT
            RestApiId: !Ref Api
      Policies:
      - Statement:
        - Action:
            - "glue:BatchGetPartition"
            - "glue:GetDatabase*"
            - "glue:GetPartition*"
            - "glue:GetTable*"
          Effect: "Allow"
          Resource:
            - !Sub "arn:${AWS::Partition}:glue:*:*:catalog*"
            - !Sub "arn:${AWS::Partition}:glue:*:*:database*"
            - !Sub "arn:${AWS::Partition}:glue:*:*:table*"
            - !Sub "arn:${AWS::Partition}:glue:*:*:partition*"
      - DynamoDBCrudPolicy:
          TableName: !Ref DataMapperTableName
  GetDataMappers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_data_mappers_handler
      CodeUri: ../backend/lambdas/data_mappers/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/data_mappers
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DataMapperTableName
  DeleteDataMapper:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.delete_data_mapper_handler
      CodeUri: ../backend/lambdas/data_mappers/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/data_mappers/{data_mapper_id}
            Method: DELETE
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DataMapperTableName
  # Jobs
  GetJob:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_job_handler
      CodeUri: ../backend/lambdas/jobs/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /v1/jobs/{job_id}
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName

  ListJobs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.list_jobs_handler
      CodeUri: ../backend/lambdas/jobs/
      Events:
        List:
          Type: Api
          Properties:
            Path: /v1/jobs
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName

  ListJobEvents:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.list_job_events_handler
      CodeUri: ../backend/lambdas/jobs/
      Events:
        List:
          Type: Api
          Properties:
            Path: /v1/jobs/{job_id}/events
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName

  # Settings
  ListSettings:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.list_settings_handler
      CodeUri: ../backend/lambdas/settings/
      Events:
        List:
          Type: Api
          Properties:
            Path: /v1/settings
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - Statement:
          - Action: "ssm:GetParameter"
            Effect: "Allow"
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ConfigParameter}"

Outputs:
  AccessControlAllowOriginHeader:
    Description: Access-Control-Allow-Origin header sent from API endpoints
    Value: !If
      - DefaultAccessControlOrigin
      - !Ref WebUIOrigin
      - !Ref AccessControlAllowOriginOverride
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  