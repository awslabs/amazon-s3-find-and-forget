AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Amazon S3 Find and Forget API

Globals:
  Function:
    Runtime: python3.7
    Timeout: 180
    Layers: !Ref CommonLayers
    Environment:
      Variables:
        AllowOrigin: !If
          - DefaultAccessControlOrigin
          - !Ref WebUIOrigin
          - !Ref AccessControlAllowOriginOverride
        ConfigParam: !Ref ConfigParameter
        DeletionQueueTable: !Ref DeletionQueueTableName
        DataMapperTable: !Ref DataMapperTableName
        JobTable: !Ref JobTableName
        JobTableDateGSI: !Ref JobTableDateGSI
        LogLevel: !Ref LogLevel
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !If
        - DefaultAccessControlOrigin
        - !Sub "'${WebUIOrigin}'"
        - !Sub "'${AccessControlAllowOriginOverride}'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !Ref CognitoUserPoolArn
      AddDefaultAuthorizerToCorsPreflight: False

Parameters:
  AccessControlAllowOriginOverride:
    Type: String
  ConfigParameter:
    Type: String
  CognitoUserPoolArn:
    Type: String
  CommonLayers:
    Type: CommaDelimitedList
    Description: Common layers supplied to all functions
  DataMapperTableName:
    Description: Table name for DataMapper Table
    Type: String
  DeletionQueueTableName:
    Description: Table name for Deletion Queue Table
    Type: String
  JobTableDateGSI:
    Description: Date ordered GSI for Jobs Table
    Type: String
  JobTableName:
    Description: Table name for Jobs Table
    Type: String
  JobTableStreamArn:
    Description: Stream ARN for Jobs Table
    Type: String
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - CRITICAL
      - FATAL
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      - NOTSET
  StateMachineArn:
    Description: State Machine to invoke to process the deletion queue
    Type: String
  WebUIOrigin:
    Type: String

Conditions:
  DefaultAccessControlOrigin: !Equals [!Ref AccessControlAllowOriginOverride, "false"]
  
Resources:
  ## Queue
  EnqueueDeletion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.enqueue_handler
      CodeUri: ../backend/lambdas/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue
            Method: PATCH
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DeletionQueueTableName
  GetDeletionQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_handler
      CodeUri: ../backend/lambdas/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
  CancelDeletion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.cancel_handler
      CodeUri: ../backend/lambdas/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue/matches
            Method: delete
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
  ProcessQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.process_handler
      CodeUri: ../backend/lambdas/queue/
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachineArn
          GSIBucketCount: 1
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTableName
        - Statement:
          - Action: "ssm:GetParameter"
            Effect: "Allow"
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ConfigParameter}"
  # DataMappers
  CreateDataMapper:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.create_data_mapper_handler
      CodeUri: ../backend/lambdas/data_mappers/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /data_mappers/{data_mapper_id}
            Method: PUT
      Policies:
      - Statement:
        - Action:
            - "glue:BatchGetPartition"
            - "glue:GetDatabase*"
            - "glue:GetPartition*"
            - "glue:GetTable*"
          Effect: "Allow"
          Resource:
            - !Sub "arn:${AWS::Partition}:glue:*:*:catalog*"
            - !Sub "arn:${AWS::Partition}:glue:*:*:database*"
            - !Sub "arn:${AWS::Partition}:glue:*:*:table*"
            - !Sub "arn:${AWS::Partition}:glue:*:*:partition*"
      - DynamoDBCrudPolicy:
          TableName: !Ref DataMapperTableName
  GetDataMappers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_data_mappers_handler
      CodeUri: ../backend/lambdas/data_mappers/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /data_mappers
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DataMapperTableName
  DeleteDataMapper:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.delete_data_mapper_handler
      CodeUri: ../backend/lambdas/data_mappers/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /data_mappers/{data_mapper_id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DataMapperTableName
  # Jobs
  GetJob:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_job_handler
      CodeUri: ../backend/lambdas/jobs/
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachineArn
      Events:
        Get:
          Type: Api
          Properties:
            Path: /jobs/{job_id}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName

  ListJobs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.list_jobs_handler
      CodeUri: ../backend/lambdas/jobs/
      Environment:
        Variables:
          GSIBucketCount: 1
      Events:
        List:
          Type: Api
          Properties:
            Path: /jobs
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName

  ListJobEvents:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.list_job_events_handler
      CodeUri: ../backend/lambdas/jobs/
      Events:
        List:
          Type: Api
          Properties:
            Path: /jobs/{job_id}/events
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobTableName

  StreamProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: stream_processor.handler
      CodeUri: ../backend/lambdas/jobs/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTableName
        - Statement:
          - Effect: Allow
            Action:
              - "states:DescribeStateMachine"
              - "states:DescribeExecution"
              - "states:StartExecution"
            Resource: !Ref StateMachineArn
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachineArn
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !Ref JobTableStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            BisectBatchOnFunctionError: true
            ParallelizationFactor: 1
            MaximumRetryAttempts: 3
            MaximumRecordAgeInSeconds: 86400
            DestinationConfig:
              OnFailure:
                Type: SQS
                Destination: !GetAtt EventsDLQ.Arn

  EventsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs

Outputs:
  AccessControlAllowOriginHeader:
    Description: Access-Control-Allow-Origin header sent from API endpoints 
    Value: !If
      - DefaultAccessControlOrigin
      - !Ref WebUIOrigin
      - !Ref AccessControlAllowOriginOverride
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  